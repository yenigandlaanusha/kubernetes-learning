There are 3 diferent types of services:
1.Cluster IP
2.Nodeport 
3.LoadBalancer

ClusterIP: Exposes a service which is only accessible from within the cluster.
NodePort: Exposes a service via a static port on each node’s IP.
LoadBalancer: Exposes the service via the cloud provider’s load balancer.

Kubernetes Services Demo:

Take any web application, here i'm using a python django application
using this docker image **anushayenigandla/python-django-app:latest**

create a deployment.yaml file
**apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-django-app #name of the application
  labels:
    app: python-django-app  #label name
spec:
  replicas: 2
  selector:
    matchLabels:
      app: python-django-app  # using this label the replica set is creating anew pod if any pod is killed
  template:
    metadata:
      labels:
        app: python-django-app  #pod label name.make sure this label and seletor label is same
    spec:
      containers:
      - name: python-django-app
        image: anushayenigandla/python-django-app:latest  #pass the image name here
        ports:
        - containerPort: 8000***  #check this in docker file in CMD

create a deployment 
**kubectl apply -f deployment.yaml**
deployment.apps/python-django-app created

get the pods
**
NAME                                 READY   STATUS              RESTARTS   AGE
python-django-app-76974d567d-9gfvn   0/1     ContainerCreating   0          54s
python-django-app-76974d567d-bd5rb   0/1     ContainerCreating   0          54s

NAME                                 READY   STATUS              RESTARTS   AGE
python-django-app-76974d567d-9gfvn   1/1     Running   0          54s
python-django-app-76974d567d-bd5rb   1/1     Running   0          54s
**

Get more details about pods
**kubectl get pods -o wide**
**
NAME                                 READY   STATUS    RESTARTS   AGE   IP            NODE       NOMINATED NODE   READINESS GATES
python-django-app-76974d567d-9gfvn   1/1     Running   0          69s   10.244.0.23   minikube   <none>           <none>
python-django-app-76974d567d-bd5rb   1/1     Running   0          69s   10.244.0.22   minikube   <none>           <none>
**

To get every step of how pod is creating
**kubectl get pods -v=7** #max v value is 9
**
I1104 08:43:27.539083   21132 loader.go:395] Config loaded from file:  C:\Users\Naresh\.kube\config
I1104 08:43:27.544249   21132 cert_rotation.go:137] Starting client certificate rotation controller
I1104 08:43:27.554940   21132 round_trippers.go:463] GET https://192.168.59.100:8443/api/v1/namespaces/default/pods?limit=500
I1104 08:43:27.554940   21132 round_trippers.go:469] Request Headers:
I1104 08:43:27.555524   21132 round_trippers.go:473]     Accept: application/json;as=Table;v=v1;g=meta.k8s.io,application/json;as=Table;v=v1beta1;g=meta.k8s.io,application/json
I1104 08:43:27.556623   21132 round_trippers.go:473]     User-Agent: kubectl/v1.28.3 (windows/amd64) kubernetes/a8a1abc
I1104 08:43:27.573375   21132 round_trippers.go:574] Response Status: 200 OK in 15 milliseconds
NAME                                 READY   STATUS    RESTARTS   AGE
python-django-app-76974d567d-9gfvn   1/1     Running   0          86s
python-django-app-76974d567d-bd5rb   1/1     Running   0          86s
**

Delete a pod
**kubectl delete pod python-django-app-76974d567d-9gfvn**
pod "python-django-app-76974d567d-9gfvn" deleted

Try kubectl get pods # we can see here again 2 pods are running becoz in deployment yaml file , we have mentioned the replica sets as 2 but if you notice the ip address is different.
the user who is using the same ip address will not be able to access it.becoz in kubernetes the ip are adding dynamically tht's the reason we are getting different ip address.

**
kubectl get pods
NAME                                 READY   STATUS    RESTARTS   AGE
python-django-app-76974d567d-bd5rb   1/1     Running   0          3m9s
python-django-app-76974d567d-l46wp   1/1     Running   0          8s
***

**
kubectl get pods -o wide
NAME                                 READY   STATUS    RESTARTS   AGE     IP            NODE       NOMINATED NODE   READINESS GATES
python-django-app-76974d567d-bd5rb   1/1     Running   0          3m17s   10.244.0.22   minikube   <none>           <none>
python-django-app-76974d567d-l46wp   1/1     Running   0          16s     10.244.0.25   minikube   <none>           <none>
**

To access the application
**
minikube ssh
curl -L http://<ipaddress>:8000/demo #using L becoz application has a redirect , port is 8000
curl -L http://10.244.0.22:8000/demo
we can see the html of the page
**
If you try to access the url outside, we will not see any traffic beoc the pod is only be able to access inside the cluster 
**curl -L http://10.244.0.25:8000/demo
output: empty**
There is no traffic
This is called Cluster IP Service

we are able to access application and able to get the response only inside the kubernetes cluster  this is becoz a pod be default will have only 
the cluster network attached to it so If it ia cluster network we need to access it using the  cluster itself.we need to login to the cluster and access it
but this is not expected.what if the people who dont have access to the kubernetes cluster.and what if external customer what to access the application.
We have 2 problem to solve:
1.people inside org
2.expose the application to world
